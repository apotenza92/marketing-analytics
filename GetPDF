#!/bin/zsh

# Check if filename is provided as an argument
if [ -z "$1" ]; then
    echo "Please provide the Python script filename as an argument."
    exit 1
fi

# Get the input filename (without .py extension)
PYTHON_FILE="$1"
IPYNB_FILE="${PYTHON_FILE%.py}.ipynb"

# Step 1: Convert the Python script with # %% blocks into a Jupyter notebook
echo "Converting $PYTHON_FILE to Jupyter notebook"
p2j "$PYTHON_FILE"

# Check if conversion was successful
if [ ! -f "$IPYNB_FILE" ]; then
    echo "Error converting $PYTHON_FILE to Jupyter notebook."
    exit 1
fi

# Create a temporary config file for table styling
CONFIG_FILE="jupyter_pdf_config.py"
cat >"$CONFIG_FILE" <<'EOL'
c = get_config()

# Configure template
c.TemplateExporter.extra_template_content = r"""
\usepackage{geometry}
\geometry{verbose,tmargin=0.5in,bmargin=0.5in,lmargin=0.5in,rmargin=0.5in}
\usepackage{booktabs}
\usepackage{longtable}
\usepackage{array}
\usepackage{tabularx}
\usepackage{adjustbox}

% Adjust table settings
\renewenvironment{longtable}{\begin{adjustbox}{width=\textwidth,center}{}\begin{tabular}}{\end{tabular}\end{adjustbox}}

% Better table formatting
\def\tabulary{\begingroup\let\\\tabularnewline\bgroup\tabularx}
\usepackage{caption}
\captionsetup{width=0.9\textwidth}
"""

# Configure pandas display options
c.ExecutePreprocessor.startup_timeout = 180
EOL

# Step 2: Insert pandas display configuration at the start of the notebook
TMP_NOTEBOOK="${IPYNB_FILE%.ipynb}_tmp.ipynb"
jq '.cells = [{"cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": ["import pandas as pd\n", "pd.set_option(\"display.max_columns\", None)\n", "pd.set_option(\"display.max_rows\", None)\n", "pd.set_option(\"display.width\", None)\n", "pd.set_option(\"display.max_colwidth\", None)\n", "pd.set_option(\"display.notebook_repr_html\", False)  # Force markdown representation\n"]}] + .cells' "$IPYNB_FILE" >"$TMP_NOTEBOOK"
mv "$TMP_NOTEBOOK" "$IPYNB_FILE"

# Step 3: Execute the notebook to capture the outputs with a loading bar
echo -n "Executing $IPYNB_FILE to capture outputs (this may take a while)"
echo ""

# Run the notebook execution in the background
jupyter nbconvert --to notebook --execute "$IPYNB_FILE" --inplace &
sleep 1

# Simulate a loading bar with dots while the notebook is executing
while kill -0 $! 2>/dev/null; do
    echo -n "."
    sleep 1
done
echo ""
echo " Done."

# Step 4: Convert the executed notebook into a PDF with custom config
echo "Converting $IPYNB_FILE to PDF..."
jupyter nbconvert --to pdf --no-input --config "$CONFIG_FILE" "$IPYNB_FILE"

# Check if PDF was created successfully
PDF_FILE="${IPYNB_FILE%.ipynb}.pdf"
if [ -f "$PDF_FILE" ]; then
    echo "Conversion complete. PDF saved as $PDF_FILE"

    # Step 5: Clean up temporary files
    echo "Cleaning up temporary files..."
    rm "$IPYNB_FILE" "$CONFIG_FILE"
else
    echo "Error converting notebook to PDF."
    rm "$CONFIG_FILE"
    exit 1
fi

# Send a macOS notification when done
osascript -e 'display notification "'"$PDF_FILE"'" with title "Jupyter to PDF Complete"'

# Open the PDF file in the default PDF viewer
open "$PDF_FILE"
